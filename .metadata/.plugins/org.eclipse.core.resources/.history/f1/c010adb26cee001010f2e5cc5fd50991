require 'rubygems'
require 'httparty'
require 'nokogiri'
require 'open-uri'
class WelcomeController < ApplicationController
  
  include HTTParty
  include Nokogiri
  @un, @pw = 'aviord4@utveckling', 'K5MeMmPP'
  #http_basic_authenticate_with :name => USER, :password => PASSWORD, :except => :index
  before_filter :authentication_check

  basic_auth 'aviord4@utveckling', 'K5MeMmPP'
  
  
  def authentication_check
    authenticate_or_request_with_http_basic do |un,pw|
    @auth = {:username => @un, :password => @pw}
    basic_auth = @auth
    end  
      
  end
  
   def index
     # this needs to come from sessions details in html header
     @message = params[:sfdcid]
   # @sfdctables =["Name", "PAR121__parId__c", "AccountNumber", "PAR121__Status__c", "PAR121__StatusCode__c"]
   end
  
   def paruser
      @pardb = Pardb.find(params[:id])
      # basic_auth 'aviord4@utveckling', 'K5MeMmPP'
      #basic_auth '#{@pardb.par_un}' , '#{@pardb.par_pw}'
      # @pardb = Pardb.find(1)
     # find_by_wn("Ikea", "Stockholm")
   end
   
   def disp_countrydetails
     
   end
   def fieldlist
      @fieldlist = Array.new
      @sfdctables = Sfdctable.all
      @sfdctables.each do |sfdctable| 
  
        @fieldlist.push(sfdctable.fieldname)
      end
  
      # @fieldlist= Sfdctable.find(:all, :select => "fieldname")
    
      # @fieldlist = ["Name", "PAR121__parId__c", "AccountNumber", "PAR121__Status__c", "PAR121__StatusCode__c"]
    end
    
     #searches the database for data based on search criteria
  def find_by_wn
    
    wn = params[:worksite].capitalize
    wgc = params[:country].capitalize
   
    theUrl = 'https://obo.par.se/itb/doc/S-W-4.xml' 
    
    resp = self.class.get(theUrl, :query => {:worksiteName => wn, :worksiteGeneralCity => wgc})
    resp_hash = resp.parsed_response
    resp_data_array = resp_hash["S_W_4"]["WorksiteSearchResult"]["Hit"]
    @mapped_data = Array.new
    counter =0
    resp_array = resp_data_array.each do |ele|  
      resp_array = ele
      # can we create this table here? 
      
      @mapped_data[counter] =resp_array["Name"], resp_array["CompanyNumber"], resp_array["parId"]
      counter += 1
         
   end
     
   
   end 
    # checks for user requirement
   def get_user_req
       user_choice = params[:id]
       selected_par = params[:par]
       
       orgId= 1
       mapped_hash= Hash.new
       theUrl = 'https://obo.par.se/itb/doc/WorksiteBlock.xml' 
    
      # selected_fields in a hash
      #selected_fields = Hash.new
      #selected_fields = {"Name" => "Name", "CompanyNumber" =>"AccountNumber", "parId" => "PAR121__parId__c"}
    
      #resp = self.class.get(theUrl, :query => {:worksiteId => parId})
      # read the xml file  NEEDS TO Be DYNAMIC $$$$$$$$$$$$$$$$$$$$$$$$$
      # $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
      #f= File.read('sample.xml')
     # doc=Nokogiri::XML(f)
      doc = Nokogiri::XML(open("https://obo.par.se/itb/doc/WorksiteBlock.xml"))
       #doc = Nokogiri::XML(open("http://sports.yahoo.com/top/rss.xml"))   
      # check the sqlite db for corresponding xml tag
       
      db = SQLite3::Database.new("selectedfields.database")
      db.results_as_hash=true
      #  Xmltag.find_by_sql ["SELECT parfieldkey from xmltags where sfdckey in ('Name', 'AccountNumber')" ] do |row|
      db.execute("SELECT sfdcField, parField from selectedfields where orgId = ? ", orgId) do |row|
      query_result= row['parField']
      sfdckey = row['sfdcField']
     
      # fetch the value for the selected fields from the xml file
      doc.xpath(query_result).each do |node|
         @mapped_hash[sfdckey] = node.children.to_s 
      end    
     
    end
    db.close
    
   
    # call insertsobject.rb to insert the mapped hashes into the S Object
   #  InsertSObject.createclientobject(mapped_hash, parId)
       #worksiteblockobject = CallbackWorksiteBlock.new
       #worksiteblockobject.find_by_wsb("#{selected_array[3]}", @orgId) 
                 
      
      # calls worksiteblock to look for further details by creating a new object
      
       
   end
end
