<h1>Listing faqs</h1>
<ul id = "faqs">
<% @faqs.each do |faq| %>
  <% content_tag_for :li, faq do %>
  <span  class="handle">[drag]</span>
    <%= link_to h(faq.question), faq %>
<% end %>
<% end %>
</ul>
<%= sortable_element("faqs", :url=>sort_faqs_path, :handle => "handle") %>


<% @faqs.each do |faq| %>
<% faq_id = "#{faq.question}" %>
<div class="faq" id=<%= faq_id %> > 
  <li>
    <%= h faq.question %><br>
    
 </li>
</div>
<%= draggable_element(faq_id, :revert=>true) %>
<% end %>

	<div id="drag_demo_new"
	<p><%= link_to 'New Faq', new_faq_path %></p>
	<span  class="handle">[drag]</span>
	</div>
	<script type="text/javascript">
    new Draggable('drag_demo_new');
    </script>


<div id="drag_demo_1" style="width:100px; height:100px; background:#7baaed; border:1px solid #333;"></div>
  <script type="text/javascript">
    new Draggable('drag_demo_1');
  </script>
  

<div id="drag_demo_2" style="width:100px; height:100px; background:#fff85d; border:1px solid #333;"></div>
  <script type="text/javascript">
    new Draggable('drag_demo_2', { revert: true, snap: [40, 40] });
  </script>

  
<div id="drag_demo_3" style="width:80px; height:80px; cursor:move; background:#88da5d; border:1px solid #333;"></div>
  <script type="text/javascript">
    new Draggable('drag_demo_3', { scroll: window });
  </script>
 

<div class="selected fields" id="droppable_container">
	<h>Drop selected fields here!</h>
	<div id="droppable_demo">
 	</div>
<ul id = "faqs">
<% @faqs.each do |faq| %>

 <% content_tag_for :li, faq do %>
 <div id="draggable_fields"   class="draggable"</div>
  <span  class="handle">[drag]</span>
  <%= link_to h(faq.question), faq %>
  <% end %>
  
 <script type="text/javascript">
  new Draggable("draggable_fields");
  Droppables.add('droppable_demo', { 
    accept: 'draggable',
    hoverclass: 'hover',
    onDrop: function(dragged,droped) { $('droppable_demo').highlight(); 
     alert('Dropped onto: ' + dropped.id); 
     alert('Dragged: ' + dragged.id)}
  });
 </script>

<% end %>
</ul>


</div>

<html>
<head>
<title>Drag & Drop Ajax Tutorial!</title>
<style type="text/css">

body {
font:10px Verdana,sans-serif;
}

#box {
z-index:100;
width:100px; height:100px;
border:1px solid silver;
background: #eee;
text-align:center;
color:#333;
}

#dropbox {
position:absolute;
border:1px solid red;
background:orange;
text-align:center;
color:#333;
}

</style>
<script type="text/javascript">

var dragbox;
var deltaX, deltaY;
var client;
createClient();


function createClient() {
try {
client = window.XMLHttpRequest ? new XMLHttpRequest() : 
new ActiveXObject("Microsoft.XMLHTTP");
} catch (e) { 
alert("Sorry, your browser is not Ajax-enabled!"); 
}
}

function setOpacity(node,val) {
if (node.filters) {
try {
node.filters["alpha"].opacity = val*100;
} catch (e) { }
} else if (node.style.opacity) {
node.style.opacity = val;
}
}

function getX(node) {
return parseInt(node.style.left);
}

function getY(node) {
return parseInt(node.style.top);
}

function getWidth(node) {
return parseInt(node.style.width);
}

function getHeight(node) {
return parseInt(node.style.height);
}

function setX(node,x) {
node.style.left = x + "px";
}

function setY(node,y) {
node.style.top = y + "px";
}

function Evt(evt) {
this.evt = evt ? evt : window.event; 
this.source = evt.target ? evt.target : evt.srcElement;
this.x = evt.pageX ? evt.pageX : evt.clientX;
this.y = evt.pageY ? evt.pageY : evt.clientY;
}

Evt.prototype.toString = function () {
return "Evt [ x = " + this.x + ", y = " + this.y + " ]";
};

Evt.prototype.consume = function () {
if (this.evt.stopPropagation) {
this.evt.stopPropagation();
this.evt.preventDefault();
} else if (this.evt.cancelBubble) {
this.evt.cancelBubble = true;
this.evt.returnValue = false;
}
};

Evt.addEventListener = function (target,type,func,bubbles) {
if (document.addEventListener) {
target.addEventListener(type,func,bubbles);
} else if (document.attachEvent) {
target.attachEvent("on"+type,func,bubbles);
} else {
target["on"+type] = func;
}
};

Evt.removeEventListener = function (target,type,func,bubbles) {
if (document.removeEventListener) {
target.removeEventListener(type,func,bubbles);
} else if (document.detachEvent) {
target.detachEvent("on"+type,func,bubbles);
} else {
target["on"+type] = null;
}
};

function dragPress(evt) {
evt = new Evt(evt);
dragbox = evt.source;
setOpacity(dragbox,.7);
deltaX = evt.x - getX(dragbox);
deltaY = evt.y - getY(dragbox);
Evt.addEventListener(document,"mousemove",dragMove,false);
Evt.addEventListener(document,"mouseup",dragRelease,false);
}

function dragMove(evt) {
evt = new Evt(evt);
setX(dragbox,evt.x - deltaX);
setY(dragbox,evt.y - deltaY);
evt.consume();
}

function dragRelease(evt) {
evt = new Evt(evt);
setOpacity(box,1);
Evt.removeEventListener(document,"mousemove",dragMove,false);
Evt.removeEventListener(document,"mouseup",dragRelease,false);
if (droppedOnDropBox(evt)) {
dragBoxDropped(evt);
}
}

function droppedOnDropBox(evt) {
var dropbox = document.getElementById("dropbox ");
var x = getX(dropbox);
var y = getY(dropbox);
var width = getWidth(dropbox);
var height = getHeight(dropbox);
return evt.x > x &&
evt.y > y &&
evt.x < x + width &&
evt.y < y + height;
}

function dragBoxDropped(evt) {
client.onreadystatechange = callback;
client.open("get","server.php",true);
client.send(null);
}

function callback() {
if (client.readyState == 4) {
if (client.status == 200) {
alert(client.responseText);
createClient();
} else {
alert("Sorry, there seems to be a problem retrieving the response:\n" +
client.statusText);
createClient();
}
}
}

</script>
</head>
<body onload="windowLoaded(event);">

<div id="dragbox" 
style="position:absolute; left:200px; top:200px; filter: alpha(opacity=100); opacity:1;"
onmousedown="dragPress(event);">Hey! Drag Me Please!</div>

<div id="dropbox"
style="left:400px; top:400px;
width:100px; height:100px;">Drop Me Here,!</div>


</body>
</html>



